name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY_DOCKERHUB: docker.io
  REGISTRY_GHCR: ghcr.io
  IMAGE_NAME: liquidlogiclabs/markdown-mermaidjs-to-pdf
  IMAGE_NAME_SHORT: markdown-mermaidjs-to-pdf
  DOCKERHUB_OWNER: ${{ vars.DOCKERHUB_OWNER || 'ravensorb' }}
  GHCR_OWNER: ${{ vars.GHCR_OWNER || 'liquidlogiclabs' }}
  PUBLISH_TO_DOCKERHUB: ${{ vars.PUBLISH_TO_DOCKERHUB || 'true' }}
  PUBLISH_TO_GHCR: ${{ vars.PUBLISH_TO_GHCR || 'true' }}

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run linting
      run: npm run lint
      
    - name: Run tests
      run: npm test
      
    - name: Build Docker image for testing
      run: |
        docker build -f docker/Dockerfile -t $IMAGE_NAME:test .
        
    - name: Run Docker tests
      run: |
        # Create test directories
        mkdir -p data/input data/output data/logs
        
        # Copy sample files if they exist
        if [ -d "tests/samples" ]; then
          cp tests/samples/*.md data/input/ 2>/dev/null || true
        fi
        
        # Create a simple test markdown if no samples exist
        if [ ! "$(ls -A data/input/*.md 2>/dev/null)" ]; then
          echo "# Test Document" > data/input/test.md
          echo "This is a test document for CI/CD pipeline." >> data/input/test.md
        fi
        
        # Determine the correct data path for different environments
        if [ -d "/workspace/data" ]; then
          # Running in act
          DATA_PATH="/workspace/data"
          echo "Detected act environment, using /workspace/data"
        else
          # Running in GitHub Actions
          DATA_PATH="$(pwd)/data"
          echo "Detected GitHub Actions environment, using $(pwd)/data"
        fi
        
        # Run the container test with environment-aware paths
        docker run --rm \
          -v "$DATA_PATH/input:/data/input" \
          -v "$DATA_PATH/output:/data/output" \
          -v "$DATA_PATH/logs:/data/logs" \
          -e LOGGING_ENABLED=true \
          -e LOG_LEVEL=info \
          $IMAGE_NAME:test
        
        # Verify output using the same path detection logic
        if [ -d "/workspace/data" ]; then
          # Running in act
          OUTPUT_PATH="/workspace/data/output"
          echo "Detected act environment, checking /workspace/data/output"
        else
          # Running in GitHub Actions
          OUTPUT_PATH="$(pwd)/data/output"
          echo "Detected GitHub Actions environment, checking $(pwd)/data/output"
        fi
        
        if [ "$(ls -A $OUTPUT_PATH/*.pdf 2>/dev/null)" ]; then
          echo "✓ Docker test passed - PDF generated successfully"
          echo "Generated PDFs: $(ls $OUTPUT_PATH/*.pdf)"
        else
          echo "✗ Docker test failed - No PDF generated"
          echo "Output directory contents: $(ls -la $OUTPUT_PATH/ 2>/dev/null || echo 'Directory empty or not found')"
          exit 1
        fi

  build-and-push:
    name: Build and Push
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/'))
    
    outputs:
      image-tag: ${{ steps.meta-ghcr.outputs.tags }}
      image-digest: ${{ steps.build-ghcr.outputs.digest }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Docker Hub
      if: env.PUBLISH_TO_DOCKERHUB == 'true'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY_DOCKERHUB }}
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY_GHCR }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata for GHCR
      id: meta-ghcr
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY_GHCR }}/${{ env.GHCR_OWNER }}/${{ env.IMAGE_NAME_SHORT }}
        tags: |
          type=raw,value=latest
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
        flavor: |
          latest=auto
        labels: |
          org.opencontainers.image.title=Markdown to PDF with MermaidJS
          org.opencontainers.image.description=Convert Markdown files with Mermaid diagrams to PDF
          org.opencontainers.image.vendor=Liquid Logic Labs
          org.opencontainers.image.source={{repo_url}}
          org.opencontainers.image.version={{version}}
          org.opencontainers.image.revision={{sha}}
          org.opencontainers.image.created={{created}}
          com.liquidlogiclabs.image.version={{version}}
          com.liquidlogiclabs.image.commit={{sha}}
          com.liquidlogiclabs.image.latest={{is_default_branch}}
          
    - name: Debug GHCR metadata
      run: |
        echo "GHCR tags: ${{ steps.meta-ghcr.outputs.tags }}"
        echo "GHCR labels: ${{ steps.meta-ghcr.outputs.labels }}"
        echo "GitHub ref: ${{ github.ref }}"
        echo "GitHub event: ${{ github.event_name }}"
        echo "Is default branch: ${{ github.ref == 'refs/heads/main' }}"
               
    - name: Extract metadata for Docker Hub
      id: meta-dockerhub
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY_DOCKERHUB }}/${{ env.DOCKERHUB_OWNER }}/${{ env.IMAGE_NAME_SHORT }}
        tags: |
          type=raw,value=latest
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
        flavor: |
          latest=auto
        labels: |
          org.opencontainers.image.title=Markdown to PDF with MermaidJS
          org.opencontainers.image.description=Convert Markdown files with Mermaid diagrams to PDF
          org.opencontainers.image.vendor=Liquid Logic Labs
          org.opencontainers.image.source={{repo_url}}
          org.opencontainers.image.version={{version}}
          org.opencontainers.image.revision={{sha}}
          org.opencontainers.image.created={{created}}
          com.liquidlogiclabs.image.version={{version}}
          com.liquidlogiclabs.image.commit={{sha}}
          com.liquidlogiclabs.image.latest={{is_default_branch}}
          
    - name: Debug Docker Hub metadata
      if: env.PUBLISH_TO_DOCKERHUB == 'true'
      run: |
        echo "Docker Hub tags: ${{ steps.meta-dockerhub.outputs.tags }}"
        echo "Docker Hub labels: ${{ steps.meta-dockerhub.outputs.labels }}"
        echo "GitHub ref: ${{ github.ref }}"
        echo "GitHub event: ${{ github.event_name }}"
        
    - name: Build and push to Docker Hub
      id: build-dockerhub
      if: env.PUBLISH_TO_DOCKERHUB == 'true'
      run: |
        echo "🚀 Building and pushing Docker Hub image"
      
    - name: Build Docker Hub image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/Dockerfile
        platforms: linux/amd64,linux/arm64
        push: ${{ env.PUBLISH_TO_DOCKERHUB == 'true' }}
        tags: ${{ steps.meta-dockerhub.outputs.tags }}
        labels: ${{ steps.meta-dockerhub.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Build and push to GHCR
      id: build-ghcr
      run: |
        echo "🚀 Building and pushing GHCR image"
      
    - name: Build GHCR image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/Dockerfile
        platforms: linux/amd64,linux/arm64
        push: ${{ env.PUBLISH_TO_GHCR == 'true' }}
        tags: ${{ steps.meta-ghcr.outputs.tags }}
        labels: ${{ steps.meta-ghcr.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Publish README to Registries
      if: startsWith(github.ref, 'refs/tags/')
      env:
        DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
        DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITHUB_REPOSITORY_OWNER: ${{ github.repository_owner }}
        PUBLISH_TO_DOCKERHUB: ${{ env.PUBLISH_TO_DOCKERHUB }}
        IMAGE_NAME_SHORT: ${{ env.IMAGE_NAME_SHORT }}
        DOCKERHUB_OWNER: ${{ env.DOCKERHUB_OWNER }}
        GHCR_OWNER: ${{ env.GHCR_OWNER }}
      run: |
        node scripts/publish-readme.js
        
    - name: Publish README to Docker Hub (Alternative)
      if: startsWith(github.ref, 'refs/tags/')
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY_DOCKERHUB }}/${{ env.DOCKERHUB_OWNER }}/${{ env.IMAGE_NAME_SHORT }}
        flavor: |
          latest=auto
        labels: |
          org.opencontainers.image.description=Convert Markdown files with Mermaid diagrams to PDF
          org.opencontainers.image.documentation=https://github.com/${{ github.repository }}/blob/main/README.md
        

        
    - name: Image digest
      run: echo ${{ steps.build-ghcr.outputs.digest }}

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/'))
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY_GHCR }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
      
    - name: Debug image tag
      run: |
        echo "Image tag from build job: ${{ needs.build-and-push.outputs.image-tag }}"
        echo "Image digest from build job: ${{ needs.build-and-push.outputs.image-digest }}"
        echo "Build job result: ${{ needs.build-and-push.result }}"
      
    - name: Check build job success
      run: |
        if [ "${{ needs.build-and-push.result }}" != "success" ]; then
          echo "❌ Build job failed - cannot proceed with security scan"
          exit 1
        fi
        echo "✅ Build job completed successfully"
      
    - name: Extract first tag for security scan
      id: extract-security-tag
      run: |
        # Determine the correct tag for security scanning
        if [[ "${{ github.ref }}" == refs/tags/* ]]; then
          # For releases, use the version tag
          VERSION_TAG=$(echo "${{ github.ref }}" | sed 's|refs/tags/||')
          SECURITY_TAG="${{ env.REGISTRY_GHCR }}/${{ env.GHCR_OWNER }}/${{ env.IMAGE_NAME_SHORT }}:$VERSION_TAG"
        fi
        
        # Fallback to latest if version extraction fails
        if [[ -z "$SECURITY_TAG" || "$SECURITY_TAG" == *"undefined"* ]]; then
          echo "⚠️ Version extraction failed, using latest tag"
          SECURITY_TAG="${{ env.REGISTRY_GHCR }}/${{ env.GHCR_OWNER }}/${{ env.IMAGE_NAME_SHORT }}:latest"
        fi
        
        echo "first-tag=$SECURITY_TAG" >> $GITHUB_OUTPUT
        echo "Using tag for security scan: $SECURITY_TAG"
        
    - name: Verify image exists
      run: |
        echo "Verifying image exists in registry..."
        echo "Image: ${{ steps.extract-security-tag.outputs.first-tag }}"
        
        # Try to pull the image to verify it exists
        if docker pull "${{ steps.extract-security-tag.outputs.first-tag }}" >/dev/null 2>&1; then
          echo "✅ Image verified - exists in registry"
        else
          echo "⚠️ Could not pull image directly, but proceeding with scan"
          echo "Note: Trivy will attempt to pull the image during scanning"
        fi
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@0.32.0
      with:
        image-ref: ${{ steps.extract-security-tag.outputs.first-tag }}
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH'
        exit-code: '0'
        ignore-unfixed: true
        vuln-type: 'os,library'
        cache: 'true'
        timeout: '10m'
        hide-progress: 'false'
        
    - name: Check Trivy results
      run: |
        echo "Checking for Trivy results..."
        if [ -f "trivy-results.sarif" ]; then
          echo "✅ Trivy SARIF file created successfully"
          echo "File size: $(wc -c < trivy-results.sarif) bytes"
        else
          echo "❌ Trivy SARIF file not found"
          echo "Current directory contents:"
          ls -la
          exit 1
        fi
        
    - name: Generate SBOM
      uses: anchore/sbom-action@v0
      with:
        image: ${{ steps.extract-security-tag.outputs.first-tag }}
        format: spdx-json
        output-file: sbom.spdx.json
        
    - name: Upload SBOM
      uses: actions/upload-artifact@v4
      with:
        name: sbom
        path: sbom.spdx.json
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always() && hashFiles('trivy-results.sarif') != ''
      with:
        sarif_file: 'trivy-results.sarif'

  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: [build-and-push, security-scan]
    if: always() && github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/'))
    
    steps:
    - name: Notify on success
      if: needs.build-and-push.result == 'success' && needs.security-scan.result == 'success'
      run: |
        echo "✅ Build and deployment completed successfully!"
        echo "Image: ${{ needs.build-and-push.outputs.image-tag }}"
        echo "Digest: ${{ needs.build-and-push.outputs.image-digest }}"
        
    - name: Notify on failure
      if: needs.build-and-push.result == 'failure' || needs.security-scan.result == 'failure'
      run: |
        echo "❌ Build or deployment failed!"
        echo "Build status: ${{ needs.build-and-push.result }}"
        echo "Security scan status: ${{ needs.security-scan.result }}" 